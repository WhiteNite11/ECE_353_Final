


ARM Macro Assembler    Page 1 


    1 00000000         ; <<< Use Configuration Wizard in Context Menu >>>
    2 00000000         ;*******************************************************
                       ***********************
    3 00000000         ;
    4 00000000         ; startup_rvmdk.S - Startup code for use with Keil's uVi
                       sion.
    5 00000000         ;
    6 00000000         ; Copyright (c) 2005-2011 Texas Instruments Incorporated
                       .  All rights reserved.
    7 00000000         ; Software License Agreement
    8 00000000         ; 
    9 00000000         ; Texas Instruments (TI) is supplying this software for 
                       use solely and
   10 00000000         ; exclusively on TI's microcontroller products. The soft
                       ware is owned by
   11 00000000         ; TI and/or its suppliers, and is protected under applic
                       able copyright
   12 00000000         ; laws. You may not combine this software with "viral" o
                       pen-source
   13 00000000         ; software in order to form a larger program.
   14 00000000         ; 
   15 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
                       
   16 00000000         ; NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, 
                       INCLUDING, BUT
   17 00000000         ; NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY 
                       AND FITNESS FOR
   18 00000000         ; A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL 
                       NOT, UNDER ANY
   19 00000000         ; CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR C
                       ONSEQUENTIAL
   20 00000000         ; DAMAGES, FOR ANY REASON WHATSOEVER.
   21 00000000         ; 
   22 00000000         ; This is part of revision 8264 of the EK-LM3S1968 Firmw
                       are Package.
   23 00000000         ;
   24 00000000         ;*******************************************************
                       ***********************
   25 00000000         
   26 00000000         ;*******************************************************
                       ***********************
   27 00000000         ;
   28 00000000         ; <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   29 00000000         ;
   30 00000000         ;*******************************************************
                       ***********************
   31 00000000 00001000 
                       Stack   EQU              0x00001000
   32 00000000         
   33 00000000         ;*******************************************************
                       ***********************
   34 00000000         ;
   35 00000000         ; <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   36 00000000         ;
   37 00000000         ;*******************************************************
                       ***********************
   38 00000000 00001000 
                       Heap    EQU              0x00001000
   39 00000000         



ARM Macro Assembler    Page 2 


   40 00000000         ;*******************************************************
                       ***********************
   41 00000000         ;
   42 00000000         ; Allocate space for the stack.
   43 00000000         ;
   44 00000000         ;*******************************************************
                       ***********************
   45 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   46 00000000         StackMem
   47 00000000                 SPACE            Stack
   48 00001000         __initial_sp
   49 00001000         
   50 00001000         ;*******************************************************
                       ***********************
   51 00001000         ;
   52 00001000         ; Allocate space for the heap.
   53 00001000         ;
   54 00001000         ;*******************************************************
                       ***********************
   55 00001000                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   56 00000000         __heap_base
   57 00000000         HeapMem
   58 00000000                 SPACE            Heap
   59 00001000         __heap_limit
   60 00001000         
   61 00001000         ;*******************************************************
                       ***********************
   62 00001000         ;
   63 00001000         ; Indicate that the code in this file preserves 8-byte a
                       lignment of the stack.
   64 00001000         ;
   65 00001000         ;*******************************************************
                       ***********************
   66 00001000                 PRESERVE8
   67 00001000         
   68 00001000         ;*******************************************************
                       ***********************
   69 00001000         ;
   70 00001000         ; Place code into the reset code section.
   71 00001000         ;
   72 00001000         ;*******************************************************
                       ***********************
   73 00001000                 AREA             RESET, CODE, READONLY
   74 00000000                 THUMB
   75 00000000         
   76 00000000         ;*******************************************************
                       ***********************
   77 00000000         ;
   78 00000000         ; External declaration for the interrupt handler used by
                        the application.
   79 00000000         ;
   80 00000000         ;*******************************************************
                       ***********************
   81 00000000                 EXTERN           UARTIntHandler
   82 00000000                 EXTERN           SYSTICKIntHandler
   83 00000000                 EXTERN           WatchDogISR
   84 00000000         



ARM Macro Assembler    Page 3 


   85 00000000         ;*******************************************************
                       ***********************
   86 00000000         ;
   87 00000000         ; The vector table.
   88 00000000         ;
   89 00000000         ;*******************************************************
                       ***********************
   90 00000000                 EXPORT           __Vectors
   91 00000000         __Vectors
   92 00000000 00001000        DCD              StackMem + Stack 
                                                            ; Top of Stack    0
                                                            
   93 00000004 00000000        DCD              Reset_Handler ; Reset Handler  
                                                              1
   94 00000008 00000000        DCD              NmiSR       ; NMI Handler    2
   95 0000000C 00000000        DCD              FaultISR    ; Hard Fault Handle
                                                            r  3 
   96 00000010 00000000        DCD              IntDefaultHandler ; The MPU fau
                                                            lt handler  4
   97 00000014 00000000        DCD              IntDefaultHandler ; The bus fau
                                                            lt handler  5
   98 00000018 00000000        DCD              IntDefaultHandler ; The usage f
                                                            ault handler 6
   99 0000001C 00000000        DCD              0           ; Reserved     7
  100 00000020 00000000        DCD              0           ; Reserved     8
  101 00000024 00000000        DCD              0           ; Reserved     9
  102 00000028 00000000        DCD              0           ; Reserved     10
  103 0000002C 00000000        DCD              IntDefaultHandler ; SVCall hand
                                                            ler   11
  104 00000030 00000000        DCD              IntDefaultHandler ; Debug monit
                                                            or handler  12
  105 00000034 00000000        DCD              0           ; Reserved     13
  106 00000038 00000000        DCD              IntDefaultHandler ; The PendSV 
                                                            handler  14
  107 0000003C 00000000        DCD              IntDefaultHandler ; The SysTick
                                                             handler  15
  108 00000040 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port A    16
                                                            
  109 00000044 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port B    17
                                                            
  110 00000048 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port C    18
                                                            
  111 0000004C 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port D    19
                                                            
  112 00000050 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port E    20
                                                            
  113 00000054 00000000        DCD              IntDefaultHandler ; UART0 Rx an
                                                            d Tx   21
  114 00000058 00000000        DCD              IntDefaultHandler ; UART1 Rx an
                                                            d Tx   22 
  115 0000005C 00000000        DCD              IntDefaultHandler ; SSI0 Rx and
                                                             Tx   23  
  116 00000060 00000000        DCD              IntDefaultHandler ; I2C0 Master
                                                             and Slave  24



ARM Macro Assembler    Page 4 


  117 00000064 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Fault     25
  118 00000068 00000000        DCD              IntDefaultHandler ; PWM Generat
                                                            or 0   26
  119 0000006C 00000000        DCD              IntDefaultHandler ; PWM Generat
                                                            or 1   27
  120 00000070 00000000        DCD              IntDefaultHandler ; PWM Generat
                                                            or 2   28
  121 00000074 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 0  29
  122 00000078 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 0   30
  123 0000007C 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 1   31
  124 00000080 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 2   32 
  125 00000084 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 3   33
  126 00000088 00000000        DCD              IntDefaultHandler ; Watchdog ti
                                                            mer   34
  127 0000008C 00000000        DCD              IntDefaultHandler ; Timer 0 sub
                                                            timer A  35
  128 00000090 00000000        DCD              IntDefaultHandler ; Timer 0 sub
                                                            timer B  36
  129 00000094 00000000        DCD              IntDefaultHandler ; Timer 1 sub
                                                            timer A  37
  130 00000098 00000000        DCD              IntDefaultHandler ; Timer 1 sub
                                                            timer B  38
  131 0000009C 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer A  39
  132 000000A0 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer B  40
  133 000000A4 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 0  41
  134 000000A8 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 1  42 
  135 000000AC 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 2  43
  136 000000B0 00000000        DCD              IntDefaultHandler ; System Cont
                                                            rol (PLL, OSC, BO) 
                                                            44
  137 000000B4 00000000        DCD              IntDefaultHandler ; FLASH Contr
                                                            ol    45
  138 000000B8 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port F    46
                                                            
  139 000000BC 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port G    47
                                                            
  140 000000C0 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port H    48
                                                            
  141 000000C4 00000000        DCD              IntDefaultHandler ; UART2 Rx an
                                                            d Tx   49
  142 000000C8 00000000        DCD              IntDefaultHandler ; SSI1 Rx and
                                                             Tx   50
  143 000000CC 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer A  51
  144 000000D0 00000000        DCD              IntDefaultHandler ; Timer 3 sub



ARM Macro Assembler    Page 5 


                                                            timer B  52
  145 000000D4 00000000        DCD              IntDefaultHandler ; I2C1 Master
                                                             and Slave  53
  146 000000D8 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 1  54
  147 000000DC 00000000        DCD              IntDefaultHandler 
                                                            ; CAN0      55
  148 000000E0 00000000        DCD              IntDefaultHandler 
                                                            ; CAN1      56
  149 000000E4 00000000        DCD              IntDefaultHandler 
                                                            ; CAN2      57
  150 000000E8 00000000        DCD              IntDefaultHandler 
                                                            ; Ethernet     58
  151 000000EC 00000000        DCD              IntDefaultHandler 
                                                            ; Hibernate     59
  152 000000F0         
  153 000000F0         ;*******************************************************
                       ***********************
  154 000000F0         ;
  155 000000F0         ; This is the code that gets called when the processor f
                       irst starts execution
  156 000000F0         ; following a reset event.
  157 000000F0         ;
  158 000000F0         ;*******************************************************
                       ***********************
  159 000000F0                 EXPORT           Reset_Handler
  160 000000F0         Reset_Handler
  161 000000F0         ;
  162 000000F0         ; Call the C library enty point that handles startup.  T
                       his will copy
  163 000000F0         ; the .data section initializers from flash to SRAM and 
                       zero fill the
  164 000000F0         ; .bss section.
  165 000000F0         ;
  166 000000F0                 IMPORT           __main
  167 000000F0 F7FF BFFE       B                __main
  168 000000F4         
  169 000000F4         ;*******************************************************
                       ***********************
  170 000000F4         ;
  171 000000F4         ; This is the code that gets called when the processor r
                       eceives a NMI.  This
  172 000000F4         ; simply enters an infinite loop, preserving the system 
                       state for examination
  173 000000F4         ; by a debugger.
  174 000000F4         ;
  175 000000F4         ;*******************************************************
                       ***********************
  176 000000F4         NmiSR
  177 000000F4 E7FE            B                NmiSR
  178 000000F6         
  179 000000F6         ;*******************************************************
                       ***********************
  180 000000F6         ;
  181 000000F6         ; This is the code that gets called when the processor r
                       eceives a fault
  182 000000F6         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  183 000000F6         ; for examination by a debugger.



ARM Macro Assembler    Page 6 


  184 000000F6         ;
  185 000000F6         ;*******************************************************
                       ***********************
  186 000000F6         FaultISR
  187 000000F6 E7FE            B                FaultISR
  188 000000F8         
  189 000000F8         ;*******************************************************
                       ***********************
  190 000000F8         ;
  191 000000F8         ; This is the code that gets called when the processor r
                       eceives an unexpected
  192 000000F8         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  193 000000F8         ; for examination by a debugger.
  194 000000F8         ;
  195 000000F8         ;*******************************************************
                       ***********************
  196 000000F8         IntDefaultHandler
  197 000000F8 E7FE            B                IntDefaultHandler
  198 000000FA         
  199 000000FA         ;*******************************************************
                       ***********************
  200 000000FA         ;
  201 000000FA         ; Make sure the end of this section is aligned.
  202 000000FA         ;
  203 000000FA         ;*******************************************************
                       ***********************
  204 000000FA 00 00           ALIGN
  205 000000FC         
  206 000000FC         ;*******************************************************
                       ***********************
  207 000000FC         ;
  208 000000FC         ; Some code in the normal code section for initializing 
                       the heap and stack.
  209 000000FC         ;
  210 000000FC         ;*******************************************************
                       ***********************
  211 000000FC                 AREA             |.text|, CODE, READONLY
  212 00000000         
  213 00000000         
  214 00000000         ;*******************************************************
                       ***********************
  215 00000000         ;
  216 00000000         ; Useful functions.
  217 00000000         ;
  218 00000000         ;*******************************************************
                       ***********************
  219 00000000                 EXPORT           DisableInterrupts
  220 00000000                 EXPORT           EnableInterrupts
  221 00000000                 EXPORT           StartCritical
  222 00000000                 EXPORT           EndCritical
  223 00000000                 EXPORT           WaitForInterrupt
  224 00000000         
  225 00000000         ;*********** DisableInterrupts ***************
  226 00000000         ; disable interrupts
  227 00000000         ; inputs:  none
  228 00000000         ; outputs: none
  229 00000000         DisableInterrupts
  230 00000000 B672            CPSID            I



ARM Macro Assembler    Page 7 


  231 00000002 4770            BX               LR
  232 00000004         
  233 00000004         ;*********** EnableInterrupts ***************
  234 00000004         ; disable interrupts
  235 00000004         ; inputs:  none
  236 00000004         ; outputs: none
  237 00000004         EnableInterrupts
  238 00000004 B662            CPSIE            I
  239 00000006 4770            BX               LR
  240 00000008         
  241 00000008         ;*********** StartCritical ************************
  242 00000008         ; make a copy of previous I bit, disable interrupts
  243 00000008         ; inputs:  none
  244 00000008         ; outputs: previous I bit
  245 00000008         StartCritical
  246 00000008 F3EF 8010       MRS              R0, PRIMASK ; save old status
  247 0000000C B672            CPSID            I           ; mask all (except 
                                                            faults)
  248 0000000E 4770            BX               LR
  249 00000010         
  250 00000010         ;*********** EndCritical ************************
  251 00000010         ; using the copy of previous I bit, restore I bit to pre
                       vious value
  252 00000010         ; inputs:  previous I bit
  253 00000010         ; outputs: none
  254 00000010         EndCritical
  255 00000010 F380 8810       MSR              PRIMASK, R0
  256 00000014 4770            BX               LR
  257 00000016         
  258 00000016         ;*********** WaitForInterrupt ************************
  259 00000016         ; go to low power mode while waiting for the next interr
                       upt
  260 00000016         ; inputs:  none
  261 00000016         ; outputs: none
  262 00000016         WaitForInterrupt
  263 00000016 BF30            WFI
  264 00000018 4770            BX               LR
  265 0000001A         
  266 0000001A                 EXPORT           getHeapBase
  267 0000001A                 EXPORT           getStackBase
  268 0000001A                 EXPORT           getHeapSize
  269 0000001A         
  270 0000001A         ;*******************************************************
                       ***********************
  271 0000001A         ; Returns the address of the heap base
  272 0000001A         ;*******************************************************
                       ***********************
  273 0000001A         getHeapBase
  274 0000001A F240 0000 
              F2C0 0000        MOV32            R0, __heap_base
  275 00000022 4770            BX               LR
  276 00000024         
  277 00000024         ;*******************************************************
                       ***********************
  278 00000024         ; Returns the address of the heap base
  279 00000024         ;*******************************************************
                       ***********************
  280 00000024         getHeapSize
  281 00000024 F240 0000 



ARM Macro Assembler    Page 8 


              F2C0 0000        MOV32            R0, __heap_base
  282 0000002C F240 0100 
              F2C0 0100        MOV32            R1, __heap_limit
  283 00000034 EBA1 0000       SUB              R0, R1, R0
  284 00000038 4770            BX               LR
  285 0000003A         
  286 0000003A         ;*******************************************************
                       ***********************
  287 0000003A         ; Returns the address of the heap base
  288 0000003A         ;*******************************************************
                       ***********************
  289 0000003A         getStackBase
  290 0000003A F240 0000 
              F2C0 0000        MOV32            R0, StackMem
  291 00000042 4770            BX               LR
  292 00000044         
  293 00000044         ;*******************************************************
                       ***********************
  294 00000044         ;
  295 00000044         ; The function expected of the C library startup code fo
                       r defining the stack
  296 00000044         ; and heap memory locations.  For the C library version 
                       of the startup code,
  297 00000044         ; provide this function so that the C library initializa
                       tion code can find out
  298 00000044         ; the location of the stack and heap.
  299 00000044         ;
  300 00000044         ;*******************************************************
                       ***********************
  301 00000044                 IF               :DEF: __MICROLIB
  302 00000044                 EXPORT           __initial_sp
  303 00000044                 EXPORT           __heap_base
  304 00000044                 EXPORT           __heap_limit
  305 00000044                 ELSE
  314                          ENDIF
  315 00000044         
  316 00000044         ;*******************************************************
                       ***********************
  317 00000044         ;
  318 00000044         ; Make sure the end of this section is aligned.
  319 00000044         ;
  320 00000044         ;*******************************************************
                       ***********************
  321 00000044                 ALIGN
  322 00000044         
  323 00000044         ;*******************************************************
                       ***********************
  324 00000044         ;
  325 00000044         ; Tell the assembler that we're done.
  326 00000044         ;
  327 00000044         ;*******************************************************
                       ***********************
  328 00000044                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=Start
up.d -oStartup.o -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Luminary --prede
fine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --list=Startup.lst Startup
.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 45 in file Startup.s
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 46 in file Startup.s
   Uses
      At line 92 in file Startup.s
      At line 290 in file Startup.s

__initial_sp 00001000

Symbol: __initial_sp
   Definitions
      At line 48 in file Startup.s
   Uses
      At line 302 in file Startup.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 55 in file Startup.s
   Uses
      None
Comment: HEAP unused
HeapMem 00000000

Symbol: HeapMem
   Definitions
      At line 57 in file Startup.s
   Uses
      None
Comment: HeapMem unused
__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 56 in file Startup.s
   Uses
      At line 274 in file Startup.s
      At line 281 in file Startup.s
      At line 303 in file Startup.s

__heap_limit 00001000

Symbol: __heap_limit
   Definitions
      At line 59 in file Startup.s
   Uses
      At line 282 in file Startup.s
      At line 304 in file Startup.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FaultISR 000000F6

Symbol: FaultISR
   Definitions
      At line 186 in file Startup.s
   Uses
      At line 95 in file Startup.s
      At line 187 in file Startup.s

IntDefaultHandler 000000F8

Symbol: IntDefaultHandler
   Definitions
      At line 196 in file Startup.s
   Uses
      At line 96 in file Startup.s
      At line 97 in file Startup.s
      At line 98 in file Startup.s
      At line 103 in file Startup.s
      At line 104 in file Startup.s
      At line 106 in file Startup.s
      At line 107 in file Startup.s
      At line 108 in file Startup.s
      At line 109 in file Startup.s
      At line 110 in file Startup.s
      At line 111 in file Startup.s
      At line 112 in file Startup.s
      At line 113 in file Startup.s
      At line 114 in file Startup.s
      At line 115 in file Startup.s
      At line 116 in file Startup.s
      At line 117 in file Startup.s
      At line 118 in file Startup.s
      At line 119 in file Startup.s
      At line 120 in file Startup.s
      At line 121 in file Startup.s
      At line 122 in file Startup.s
      At line 123 in file Startup.s
      At line 124 in file Startup.s
      At line 125 in file Startup.s
      At line 126 in file Startup.s
      At line 127 in file Startup.s
      At line 128 in file Startup.s
      At line 129 in file Startup.s
      At line 130 in file Startup.s
      At line 131 in file Startup.s
      At line 132 in file Startup.s
      At line 133 in file Startup.s
      At line 134 in file Startup.s
      At line 135 in file Startup.s
      At line 136 in file Startup.s
      At line 137 in file Startup.s
      At line 138 in file Startup.s
      At line 139 in file Startup.s
      At line 140 in file Startup.s
      At line 141 in file Startup.s
      At line 142 in file Startup.s
      At line 143 in file Startup.s
      At line 144 in file Startup.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 145 in file Startup.s
      At line 146 in file Startup.s
      At line 147 in file Startup.s
      At line 148 in file Startup.s
      At line 149 in file Startup.s
      At line 150 in file Startup.s
      At line 151 in file Startup.s
      At line 197 in file Startup.s

NmiSR 000000F4

Symbol: NmiSR
   Definitions
      At line 176 in file Startup.s
   Uses
      At line 94 in file Startup.s
      At line 177 in file Startup.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 73 in file Startup.s
   Uses
      None
Comment: RESET unused
Reset_Handler 000000F0

Symbol: Reset_Handler
   Definitions
      At line 160 in file Startup.s
   Uses
      At line 93 in file Startup.s
      At line 159 in file Startup.s

__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 91 in file Startup.s
   Uses
      At line 90 in file Startup.s
Comment: __Vectors used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 211 in file Startup.s
   Uses
      None
Comment: .text unused
DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 229 in file Startup.s
   Uses
      At line 219 in file Startup.s
Comment: DisableInterrupts used once
EnableInterrupts 00000004

Symbol: EnableInterrupts
   Definitions
      At line 237 in file Startup.s
   Uses
      At line 220 in file Startup.s
Comment: EnableInterrupts used once
EndCritical 00000010

Symbol: EndCritical
   Definitions
      At line 254 in file Startup.s
   Uses
      At line 222 in file Startup.s
Comment: EndCritical used once
StartCritical 00000008

Symbol: StartCritical
   Definitions
      At line 245 in file Startup.s
   Uses
      At line 221 in file Startup.s
Comment: StartCritical used once
WaitForInterrupt 00000016

Symbol: WaitForInterrupt
   Definitions
      At line 262 in file Startup.s
   Uses
      At line 223 in file Startup.s
Comment: WaitForInterrupt used once
getHeapBase 0000001A

Symbol: getHeapBase
   Definitions
      At line 273 in file Startup.s
   Uses
      At line 266 in file Startup.s
Comment: getHeapBase used once
getHeapSize 00000024

Symbol: getHeapSize



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 280 in file Startup.s
   Uses
      At line 268 in file Startup.s
Comment: getHeapSize used once
getStackBase 0000003A

Symbol: getStackBase
   Definitions
      At line 289 in file Startup.s
   Uses
      At line 267 in file Startup.s
Comment: getStackBase used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap 00001000

Symbol: Heap
   Definitions
      At line 38 in file Startup.s
   Uses
      At line 58 in file Startup.s
Comment: Heap used once
Stack 00001000

Symbol: Stack
   Definitions
      At line 31 in file Startup.s
   Uses
      At line 47 in file Startup.s
      At line 92 in file Startup.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SYSTICKIntHandler 00000000

Symbol: SYSTICKIntHandler
   Definitions
      At line 82 in file Startup.s
   Uses
      None
Comment: SYSTICKIntHandler unused
UARTIntHandler 00000000

Symbol: UARTIntHandler
   Definitions
      At line 81 in file Startup.s
   Uses
      None
Comment: UARTIntHandler unused
WatchDogISR 00000000

Symbol: WatchDogISR
   Definitions
      At line 83 in file Startup.s
   Uses
      None
Comment: WatchDogISR unused
__main 00000000

Symbol: __main
   Definitions
      At line 166 in file Startup.s
   Uses
      At line 167 in file Startup.s
Comment: __main used once
4 symbols
361 symbols in table
